// MARK: VirtualInstanceStructClass.ejs
<% let inheritedProtocols = modelProtocols.filter(p => serializable.implements[p.name]); %>

<%- acl %> struct VirtualInstance : VirtualModelInstance<%- inheritedProtocols.length > 0 ? inheritedProtocols.map(p => ', ' + p.name + 'VirtualInstance').join("") : '' %> {
	/// Compares this model's VirtualInstance type with an actual model and generates a Query
	<%- acl %> static func ==(lhs: VirtualInstance, rhs: <%- serializable.name %>?) -> Query {
		<% if(models.includes(serializable)) { %>
		return (lhs.referencedKeyPrefix + "_id") == rhs?._id
		<% } else { %>
		return lhs.referencedKeyPrefix == rhs?.serialize()
		<% } %>
	}

	<%- acl %> let keyPrefix: String

	<%- acl %> let isReference: Bool

	<% if(models.includes(serializable)) { %>
	<%- acl %> var _id: VirtualObjectId {
		return VirtualObjectId(name: referencedKeyPrefix + Key._id.keyString)
	}
	<% } %>

	<% serializable.allVariables.forEach(variable => {
			if(variable.isComputed || variable.isStatic || variable.name == "_id") { return; } %>
		 /// <%- variable.name %>: <%- variable.typeName.name %>
		 <%
		 if (supportedPrimitives.includes(variable.unwrappedTypeName)) {
			 if (numberTypes.includes(variable.unwrappedTypeName)) {
				 %><%- acl %> var <%- variable.name %>: VirtualNumber { return VirtualNumber(name: referencedKeyPrefix + Key.<%- variable.name %>.keyString) } <%
			 } else {
				 %><%- acl %> var <%- variable.name %>: Virtual<%- variable.unwrappedTypeName %> { return Virtual<%-variable.unwrappedTypeName%>(name: referencedKeyPrefix + Key.<%-variable.name%>.keyString) } <%
			 }
		 } else if ((variable.type && variable.type.kind == "enum") || (serializables.includes(variable.type) && variable.type.kind != "protocol")) {
			 ensureSerializable(variable.type);

			// reference
			if (variable.type.based["Model"]) {
			 %><%- acl %> var <%- variable.name %>: <%- variable.unwrappedTypeName %>.VirtualInstance { return <%- variable.unwrappedTypeName %>.VirtualInstance(keyPrefix: referencedKeyPrefix + Key.<%-variable.name%>.keyString, isReference: true) } <%
			} else {
			 %><%- acl %> var <%- variable.name %>: <%- variable.unwrappedTypeName %>.VirtualInstance { return <%-variable.unwrappedTypeName%>.VirtualInstance(keyPrefix: referencedKeyPrefix + Key.<%-variable.name%>.keyString) } <%
			}
		 }
	}) %>

	<%- acl %> init(keyPrefix: String = "", isReference: Bool = false) {
		self.keyPrefix = keyPrefix
		self.isReference = <%- models.includes(serializable) ? "isReference" : "false" %>
	}
} // end VirtualInstance
