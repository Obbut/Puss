// MARK: KeyEnum.ejs
<% let keyEnumVariables = []; %>
	<%- acl %> enum Key : String, ModelKey {%>
		<% if (window.models.includes(serializable)) { %>case _id<% } %>
		<%_ serializable.instanceVariables.forEach(variable => {
			if(variable.isComputed || variable.name == "_id") { return; }
			keyEnumVariables.push(variable);
			-%>
		case <%- variable.name -%> = "<%- variable.annotations["key"] || underscoreCase(uncamel(variable.name)) %>"
		<%_ }) %>

		<%- acl %> var keyString: String { return self.rawValue }

		<%- acl %> var type: Any.Type {
			switch self {
			<% if (models.includes(serializable)) { %>case ._id: return ObjectId.self<% } %>
			<%_ keyEnumVariables.forEach(variable => { -%>
			case .<%- variable.name -%>: return <%- variableTypeString(variable, {canBeOptional: false}) %>.self
			<%_ }) -%>
			}
		}

		<%- acl %> static var all: Set<Key> {
			return [<% if (models.includes(serializable)) { %>._id<% if (keyEnumVariables.length > 0) {%>, <% }} -%>
			<%_ %><%- keyEnumVariables.map(v => "." + v.name).join(", ") %>]
		}
	}
