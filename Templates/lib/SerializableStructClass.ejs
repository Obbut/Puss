extension <%- serializable.name %> : SerializableToDocument {
	<%# Classes need their designated initializers to be in the definition of the body, so we use automatic inline code generation. %>
	<% if (serializable.kind == "class") { %>// sourcery:inline:auto:<%- serializable.name %>.Meow<% } %>
	<% -%>
	<% if (serializable.kind == "class") { %>required <% }%>init(restoring source: BSON.Primitive) throws {
		guard let document = source as? BSON.Document else {
			throw Meow.Error.cannotDeserialize(type: <%- serializable.name %>.self, source: source, expectedPrimitive: BSON.Document.self);
		}

		<% if (serializable.based["Model"]) { %>Meow.pool.free(self._id)
		self._id = try document.unpack("_id")<% }

		serializable.variables.forEach(variable => {
			if (variable.isComputed || variable.isStatic) { return; }

			ensureSerializable(variable.type || variable.typeName);
			%>
		self.<%- variable.name %> = try<%- variable.isOptional ? '?' : '' %> document.unpack("<%- variable.name %>")<%
		});
		%>
	}

	<% if (serializable.kind == "class") { %>
	<% if (serializable.based["Model"]) { %>
	var _id = Meow.pool.newObjectId() { didSet { Meow.pool.free(oldValue) } }

	deinit {
		Meow.pool.handleDeinit(self)
	}
	<% } %>
		// sourcery:end
	<% } %>

	func serialize() -> Document {
		var document: Document = [:]
		<% if (serializable.based["Model"]) { %>document.pack(self._id, as: "_id")<% }

		serializable.variables.forEach(variable => {
			if (variable.isComputed || variable.isStatic) { return; }

			if (variable.type) {
				ensureSerializable(variable.type);
			}
			%>
		document.pack(self.<%- variable.name %>, as: "<%- variable.name %>")<%
		});
		%>
		return document
	}

	<% if (serializable.based["Model"]) { %>
	static let collection: MongoKitten.Collection = Meow.database["<%- serializable.name.toLowerCase() %>"]

	func handleDeinit() {
		do {
			try self.save()

		} catch {
			print("error while saving Meow object in deinit: \(error)")
			assertionFailure()
		}
	}
	<% } %>

	<%- include('KeyEnum', {serializable}); %>
	<%- include('VirtualInstanceStructClass', {serializable}); %>
	<%- include('QueryBuilder', {serializable}) %>
}

extension <%- serializable.name %> : CustomStringConvertible {
	var description: String {
		return (self.serialize() as Document).makeExtendedJSON(typeSafe: false).serializedString()
	}
}
