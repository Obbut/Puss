// MARK: SerializableStructClass.ejs
<% serializable.isModel = models.includes(serializable); %>
extension <%- serializable.name %> : SerializableToDocument {
	<%# Classes need their designated initializers to be in the definition of the body, so we use automatic inline code generation. %>
	<% if (serializable.kind == "class") { %>// sourcery:inline:auto:<%- serializable.name %>.Meow<% } %>
	<%_ -%>
	@available(*, unavailable, message: "This API is internal to Meow. You can create a new instance using your own inits or using init(newFrom:).")
	<%- acl %> <% if (serializable.kind == "class") { %>required <% }%>init(restoring source: BSON.Primitive, key: String) throws {
		guard let document = source as? BSON.Document else {
			throw Meow.Error.cannotDeserialize(type: <%- serializable.name %>.self, source: source, expectedPrimitive: BSON.Document.self)
		}
        <% if (models.includes(serializable)) { %>Meow.pool.free(self._id)
		self._id = try document.unpack("_id")<% }

		serializable.variables.forEach(variable => {
			if (variable.isComputed || variable.isStatic) { return; }

			ensureSerializable(variable.type || variable.typeName);

			if (variable.isOptional) {
			%>
		self.<%- variable.name %> = try document.unpack(Key.<%- variable.name %>.keyString)<%
			} else if (variable.defaultValue) {
			%>
		self.<%- variable.name %> = try document.unpack(Key.<%- variable.name %>.keyString, default: self.<%- variable.name %>)<%
			} else {
			%>
		self.<%- variable.name %> = try document.unpack(Key.<%- variable.name %>.keyString)<%
			}
		});
		%>
        <%- window.execute(window.deserializationGenerators, serializable) -%>
	}

	<%- acl %> <% if (serializable.kind == "class") { %>required <% }%>init(newFrom source: BSON.Primitive) throws {
		do {
			guard let document = source as? BSON.Document else {
				throw Meow.Error.cannotDeserialize(type: <%- serializable.name %>.self, source: source, expectedPrimitive: BSON.Document.self)
			}
			<%
			serializable.variables.sort((a, b) => (a.defaultValue && !b.defaultValue ? 1 : -1)).forEach(variable => {
				if (variable.isComputed || variable.isStatic) { return; }

				ensureSerializable(variable.type || variable.typeName);
				%>
			self.<%- variable.name %> = (try<%- variable.isOptional || variable.defaultValue ? '?' : '' %> document.unpack(Key.<%- variable.name %>.keyString)) <%- variable.defaultValue ? '?? self.' + variable.name : '' %><%
			});
			
			if (models.includes(serializable)) {%>
			try self.save()<%}
		%>
		} catch {
			<% if (models.includes(serializable)) { %>
			Meow.pool.free(self._id)<%}%>
			throw error
		}
	}
	<%_ if (serializable.kind == "class") { -%>
	<%_ if (models.includes(serializable)) { -%>
	<%- acl %> var _id = Meow.pool.newObjectId() { didSet { Meow.pool.free(oldValue) } }

	deinit {
		Meow.pool.handleDeinit(self)
	}
	<% } -%>
		// sourcery:end
	<% } %>

	<%- acl %> func serialize() -> Document {
		var document: Document = [:]
		<% if (models.includes(serializable)) { %>document.pack(self._id, as: "_id")<% }

		serializable.variables.forEach(variable => {
			if (variable.isComputed || variable.isStatic) { return; }

			if (variable.type) {
				ensureSerializable(variable.type);
			}
			%>
		document.pack(self.<%- variable.name %>, as: Key.<%- variable.name %>.keyString)<%
		});
		%>
        <%- window.execute(window.serializationGenerators, serializable) %>
		return document
	}

	<%- acl %> static func validateUpdate(with document: Document) throws {
		let keys = document.keys
		<%_ serializable.variables.forEach(variable => {
			if (variable.isComputed || variable.isStatic) { return; } -%>
		if keys.contains(Key.<%- variable.name %>.keyString) {
			_ = (try document.unpack(Key.<%- variable.name %>.keyString)) as <%- variableTypeString(variable, {canBeOptional: false}) %>
		}
		<%_ }) -%>
	}

	<%- acl %> <% if (serializable.kind == "struct") { %>mutating <% } %>func update(with document: Document) throws {
		try <%- serializable.name %>.validateUpdate(with: document)

		for key in document.keys {
			switch key {
			<%_ serializable.variables.forEach(variable => {
				if (variable.isComputed || variable.isStatic) { return; }
				-%>
			case Key.<%- variable.name %>.keyString:
				self.<%- variable.name %> = try document.unpack(Key.<%- variable.name %>.keyString)
			<%_ }) -%>
			default: break
			}
		}
	}

	<% if (models.includes(serializable)) { %>
	<%   if (!serializable.staticVariables.find(v => v.name == "collection")) { %>
	<%- acl %> static let collection: MongoKitten.Collection = Meow.database["<%- underscoreCase(uncamel(pluralize(serializable.name))) %>"]
	<%   } %>
	
	<%- acl %> func saveReferences() throws {
		<% serializable.variables.filter(v => models.includes(v.type)).forEach(variable => { %>
		try <%- variable.name %><%- variable.isOptional ? '?' : '' %>.save()
		<% }) %>
	}

	<%- include('ModelResolvingFunctions', {serializable}); %>
	<% } %>

	<%- include('KeyEnum', {serializable}); %>
	<%- include('Values', {serializable}); %>
	<%- include('VirtualInstanceStructClass', {serializable}); %>
}

<%- include('CustomStringConvertible', {serializable}); %>
