// MARK: Protocols.ejs
<%

modelProtocols.forEach(protocol => { %>
// MARK: - 🐈 for <%- protocol.name %>
// sourcery:inline:auto:<%- protocol.name %>.Meow
	associatedtype VirtualInstance : <%- protocol.name %>VirtualInstance
	associatedtype Values : <%- protocol.name %>Values

// sourcery:end

<% const superModelProtocols = protocol.inheritedTypes.filter(t => modelProtocols.find(p => p.name == t)); %>

public protocol <%- protocol.name %>Values : <%- superModelProtocols.length > 0 ? superModelProtocols.map(p => p + "Values").join(",") : "ModelValues" %> {
	<%_ protocol.variables.forEach(variable => { -%>
	var <%- variable.name -%>: <%- variable.unwrappedTypeName %>? { get set }
	<%_ }) %>
}

public protocol <%- protocol.name %>VirtualInstance : <%- superModelProtocols.length > 0 ? superModelProtocols.map(p => p + "VirtualInstance").join(",") : "VirtualModelInstance" %> {
	<%_ protocol.variables.forEach(variable => {
	if (supportedPrimitives.includes(variable.unwrappedTypeName)) {
		 if (numberTypes.includes(variable.unwrappedTypeName)) {
			 %> var <%- variable.name %>: VirtualNumber { get } <%
		 } else {
			 %> var <%- variable.name %>: Virtual<%- variable.unwrappedTypeName %> { get } <%
		 }
	} else if ((variable.type && variable.type.kind == "enum") || (serializables.includes(variable.type) && variable.type.kind != "protocol")) {
		 ensureSerializable(variable.type);
		 %> var <%- variable.name %>: <%- variable.unwrappedTypeName %>.VirtualInstance { get } <%
	}%>
	<%
	}) %>
}

<%
})
%>
