import Foundation
import Meow
import ExtendedJSON

<%

include('lib/MeowCore')

// Generate serialization for every serializable
// It is important to keep this as far down as possible.
// Keep track of the serializables we already handled:
let generatedSerializables = [];
let generatedSerializableTuples = [];

function generateSerializables() {
	// The reason for looping this way is that embedded serializables may be recursive, so implicit serializables may be added while looping
	let serializableIndex = 0;
	while (serializables.length > generatedSerializables.length) {
		let serializable = serializables[serializableIndex];
		serializableIndex++;
		generatedSerializables.push(serializable);

		%>
<%- include('lib/Serializable', {serializable}) %>
		<%
	}
	
	let tupleIndex = 0;
	while (serializableTuples.length > generatedSerializableTuples.length) {
		let tupleName = serializableTuples[tupleIndex];
		let tuple = tupleName.tuple;
		tupleIndex++;
		generatedSerializableTuples.push(tuple);

		%>
<%- include('lib/Tuple', {tuple, tupleName}) %>
		<%

	} // end tuple loop
} // end generatedSerializables

// three times for types that are discovered during the tuple generation process
generateSerializables()
generateSerializables()
generateSerializables()

%>

// 🐈 Statistics
// Models: <%- models.length %>
//   <%- models.map(m => m.name).join(", ") %>
// Serializables: <%- serializables.length %>
//   <%- serializables.map(s => s.name).join(", ") %>
// Tuples: <%- serializableTuples.length %>